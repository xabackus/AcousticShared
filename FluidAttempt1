import numpy as np
import pygame
import sys

# Constants and Initialization
PI = np.pi
res = 512  # Simulation area size (512x512 pixels)
dashboard_width = 400  # Width for the dashboard area

# Define dashboard heights
text_dashboard_height = 300  # Height for displaying text information
average_graph_height = 200   # Height for the average neighbors graph
cumulative_graph_height = 200  # Height for the cumulative neighbor proportions graph

# Calculate window dimensions
window_width = res + dashboard_width
window_height = max(res, text_dashboard_height + average_graph_height + cumulative_graph_height)

# Pygame Initialization
pygame.init()
window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("Bulk Acoustic 2D Continuum Simulation with Dashboards")
clock = pygame.time.Clock()

# Simulation Parameters
paused = False
running = True  # Flag to control the main loop

# Grid Parameters
grid_size = 128  # Number of grid cells along one axis
dx = 1.0 / grid_size  # Spatial resolution
dt = 1e-4  # Time step

# Initialize fields
rho = np.ones((grid_size, grid_size), dtype=np.float32)  # Density field
vx = np.zeros((grid_size, grid_size), dtype=np.float32)  # Velocity field in x
vy = np.zeros((grid_size, grid_size), dtype=np.float32)  # Velocity field in y

# Acoustic properties
po = 1e1  # Acoustic pressure (Increased for better visualization)
ax = np.array([1.0])  # Amplitude in x-direction
ay = np.array([1.0])  # Amplitude in y-direction
kx = np.array([1], dtype=int)  # Wave number in x-direction
ky = np.array([1], dtype=int)  # Wave number in y-direction

# Drag properties
gamma = 1e4  # Drag coefficient (Reduced for better visualization)

# For tracking simulation metrics
average_speed_over_time = []  # Track average speed over time
time_step = 0  # Tracks the current time step

# Font for text
pygame.font.init()
font = pygame.font.SysFont('Arial', 16)

# Define dashboard areas
text_area_rect = pygame.Rect(res, 0, dashboard_width, text_dashboard_height)
average_graph_rect = pygame.Rect(res, text_dashboard_height, dashboard_width, average_graph_height)
cumulative_graph_rect = pygame.Rect(res, text_dashboard_height + average_graph_height, dashboard_width, cumulative_graph_height)

# Initialize key press tracking variables
key_press_data = []  # List of tuples: (time_step, key_name)
xchanging = True  # Flag to indicate whether changing kx or ky
message = "Changing number of nodes along X-axis"

# Initialize acoustic force fields
def compute_acoustic_force():
    x = np.linspace(0, 1, grid_size, endpoint=False)
    y = np.linspace(0, 1, grid_size, endpoint=False)
    X, Y = np.meshgrid(x, y, indexing='xy')  # Use 'xy' indexing for correct orientation

    f_acoustic_x = np.zeros_like(X)
    f_acoustic_y = np.zeros_like(Y)

    for wave in range(len(kx)):
        f_acoustic_x += ax[wave] * np.sin(2 * PI * kx[wave] * X)
    for wave in range(len(ky)):
        f_acoustic_y += ay[wave] * np.sin(2 * PI * ky[wave] * Y)

    f_acoustic_x *= po
    f_acoustic_y *= po

    return f_acoustic_x, f_acoustic_y

# Initialize the simulation
def initialize():
    global rho, vx, vy
    rho.fill(1.0)  # Uniform density
    vx.fill(0.0)
    vy.fill(0.0)

initialize()

# Process key presses to control simulation parameters
def process_key_press(key):
    global xchanging, message, kx, ky, paused, running, key_press_data
    if key == pygame.K_ESCAPE:
        running = False
    elif key == pygame.K_r:
        initialize()
    elif key == pygame.K_SPACE:
        paused = not paused
    elif key in [pygame.K_0, pygame.K_1, pygame.K_2, pygame.K_3, pygame.K_4, pygame.K_5, pygame.K_6, pygame.K_7, pygame.K_8, pygame.K_9]:
        val = int(pygame.key.name(key))
        if xchanging:
            kx[0] = val
        else:
            ky[0] = val
        # Record key press data
        key_name = pygame.key.name(key)
        key_press_data.append((time_step, key_name))
    elif key == pygame.K_x:
        xchanging = True
        message = "Changing number of nodes along X-axis"
        key_press_data.append((time_step, 'x'))
    elif key == pygame.K_y:
        xchanging = False
        message = "Changing number of nodes along Y-axis"
        key_press_data.append((time_step, 'y'))

# Update the simulation
def update():
    global vx, vy, rho

    # Compute acoustic force
    f_acoustic_x, f_acoustic_y = compute_acoustic_force()

    # Update velocity fields with acoustic and drag forces
    vx += dt * (-gamma * vx + f_acoustic_x / rho)
    vy += dt * (-gamma * vy + f_acoustic_y / rho)

    # Apply boundary conditions (reflective boundaries)
    vx[0, :] = 0
    vx[-1, :] = 0
    vy[:, 0] = 0
    vy[:, -1] = 0

# Render the simulation
def render_simulation():
    # Process events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            global running
            running = False
        elif event.type == pygame.KEYDOWN:
            process_key_press(event.key)

    # Clear the screen
    window.fill((17, 47, 65))  # Dark background

    # Draw pressure minima lines
    lines = []
    if kx[0] > 0:
        for x_line in np.linspace(.5 / kx[0], 1 - .5 / kx[0], kx[0]):
            start_pos = (int(x_line * res), 0)
            end_pos = (int(x_line * res), res)
            lines.append((start_pos, end_pos))

    if ky[0] > 0:
        for y_line in np.linspace(.5 / ky[0], 1 - .5 / ky[0], ky[0]):
            start_pos = (0, int(y_line * res))
            end_pos = (res, int(y_line * res))
            lines.append((start_pos, end_pos))

    for line in lines:
        pygame.draw.line(window, (128, 128, 128), line[0], line[1], 1)  # Gray lines

    # Normalize the speed field for visualization
    speed = np.sqrt(vx**2 + vy**2)
    speed_min = speed.min()
    speed_max = speed.max()
    if speed_max - speed_min == 0:
        speed_max = speed_min + 1e-8
    speed_normalized = (speed - speed_min) / (speed_max - speed_min)
    speed_surface = (speed_normalized * 255).astype(np.uint8)

    # Create a color map for speed
    speed_color = np.dstack([speed_surface]*3)

    # Transpose the array to match Pygame's coordinate system
    speed_color = np.transpose(speed_color, (1, 0, 2))

    # Create a pygame surface from the speed field
    speed_surface = pygame.surfarray.make_surface(speed_color)
    speed_surface = pygame.transform.scale(speed_surface, (res, res))

    # Display the surface
    window.blit(speed_surface, (0, 0))

    # Draw Text Dashboard
    pygame.draw.rect(window, (30, 30, 30), text_area_rect)  # Background for text area

    # Display messages
    start_x = text_area_rect.left + 10
    start_y = text_area_rect.top + 10  # Starting y position for text
    spacing = 20  # Spacing between lines
    y_pos = start_y

    # Display messages
    if y_pos + spacing <= text_area_rect.bottom:
        message_surface = font.render(message, True, (255, 255, 255))
        window.blit(message_surface, (start_x, y_pos))
        y_pos += spacing

    # Display average speed
    if average_speed_over_time:
        avg_speed = average_speed_over_time[-1]
    else:
        avg_speed = 0.0
    if y_pos + spacing <= text_area_rect.bottom:
        avg_speed_surface = font.render(f"Average Speed: {avg_speed:.6f}", True, (255, 255, 255))
        window.blit(avg_speed_surface, (start_x, y_pos))
        y_pos += spacing

    pygame.display.flip()

# Main simulation loop
while running:
    if not paused:
        update()

        # Compute average speed for metrics
        avg_speed = np.mean(np.sqrt(vx**2 + vy**2))
        average_speed_over_time.append(avg_speed)

        time_step += 1  # Increment the time step after each simulation step

    # Render the simulation
    render_simulation()

    clock.tick(60)  # Limit to 60 FPS

# Clean up and exit
pygame.quit()
sys.exit()
